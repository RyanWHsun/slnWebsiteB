// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace prjWebsiteB.Models;

public partial class dbGroupBContext : DbContext
{
    public dbGroupBContext(DbContextOptions<dbGroupBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TAttraction> TAttractions { get; set; }

    public virtual DbSet<TAttractionCategory> TAttractionCategories { get; set; }

    public virtual DbSet<TAttractionComment> TAttractionComments { get; set; }

    public virtual DbSet<TAttractionImage> TAttractionImages { get; set; }

    public virtual DbSet<TAttractionTicket> TAttractionTickets { get; set; }

    public virtual DbSet<TAttractionTicketOrder> TAttractionTicketOrders { get; set; }

    public virtual DbSet<TEvent> TEvents { get; set; }

    public virtual DbSet<TEventCategory> TEventCategories { get; set; }

    public virtual DbSet<TEventCategoryMapping> TEventCategoryMappings { get; set; }

    public virtual DbSet<TEventImage> TEventImages { get; set; }

    public virtual DbSet<TEventRegistrationForm> TEventRegistrationForms { get; set; }

    public virtual DbSet<TOrder> TOrders { get; set; }

    public virtual DbSet<TOrderStatus> TOrderStatuses { get; set; }

    public virtual DbSet<TOrderStatusHistory> TOrderStatusHistories { get; set; }

    public virtual DbSet<TOrdersDetail> TOrdersDetails { get; set; }

    public virtual DbSet<TPost> TPosts { get; set; }

    public virtual DbSet<TPostAndTag> TPostAndTags { get; set; }

    public virtual DbSet<TPostCategory> TPostCategories { get; set; }

    public virtual DbSet<TPostImage> TPostImages { get; set; }

    public virtual DbSet<TPostTag> TPostTags { get; set; }

    public virtual DbSet<TProduct> TProducts { get; set; }

    public virtual DbSet<TProductCategory> TProductCategories { get; set; }

    public virtual DbSet<TProductImage> TProductImages { get; set; }

    public virtual DbSet<TUser> TUsers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Chinese_Taiwan_Stroke_CI_AS");

        modelBuilder.Entity<TAttraction>(entity =>
        {
            entity.HasKey(e => e.FAttractionId).HasName("PK__tAttract__F9B18832182D39AF");

            entity.ToTable("tAttractions");

            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FAddress).HasColumnName("fAddress");
            entity.Property(e => e.FAttractionName)
                .HasMaxLength(50)
                .HasColumnName("fAttractionName");
            entity.Property(e => e.FCategoryId).HasColumnName("fCategoryId");
            entity.Property(e => e.FClosingTime).HasColumnName("fClosingTime");
            entity.Property(e => e.FCreatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FDescription).HasColumnName("fDescription");
            entity.Property(e => e.FLatitude)
                .HasMaxLength(20)
                .HasColumnName("fLatitude");
            entity.Property(e => e.FLongitude)
                .HasMaxLength(20)
                .HasColumnName("fLongitude");
            entity.Property(e => e.FOpeningTime).HasColumnName("fOpeningTime");
            entity.Property(e => e.FPhoneNumber)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("fPhoneNumber");
            entity.Property(e => e.FRegion)
                .HasMaxLength(50)
                .HasColumnName("fRegion");
            entity.Property(e => e.FStatus)
                .HasMaxLength(10)
                .HasColumnName("fStatus");
            entity.Property(e => e.FTrafficInformation).HasColumnName("fTrafficInformation");
            entity.Property(e => e.FUpdatedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedDate");
            entity.Property(e => e.FWebsiteUrl).HasColumnName("fWebsiteURL");

            entity.HasOne(d => d.FCategory).WithMany(p => p.TAttractions)
                .HasForeignKey(d => d.FCategoryId)
                .HasConstraintName("FK__tAttracti__fCate__08B54D69");
        });

        modelBuilder.Entity<TAttractionCategory>(entity =>
        {
            entity.HasKey(e => e.FAttractionCategoryId).HasName("PK__tAttract__FD5366824DF5E2C4");

            entity.ToTable("tAttractionCategories");

            entity.Property(e => e.FAttractionCategoryId).HasColumnName("fAttractionCategoryId");
            entity.Property(e => e.FAttractionCategoryName)
                .HasMaxLength(10)
                .HasColumnName("fAttractionCategoryName");
            entity.Property(e => e.FCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreateDate");
            entity.Property(e => e.FDescription).HasColumnName("fDescription");
        });

        modelBuilder.Entity<TAttractionComment>(entity =>
        {
            entity.HasKey(e => e.FCommentId).HasName("PK__tAttract__F4718CE256C24957");

            entity.ToTable("tAttractionComments");

            entity.Property(e => e.FCommentId).HasColumnName("fCommentId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FComment).HasColumnName("fComment");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FRating).HasColumnName("fRating");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionComments)
                .HasForeignKey(d => d.FAttractionId)
                .HasConstraintName("FK__tAttracti__fAttr__03F0984C");

            entity.HasOne(d => d.FUser).WithMany(p => p.TAttractionComments)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK__tAttracti__fUser__04E4BC85");
        });

        modelBuilder.Entity<TAttractionImage>(entity =>
        {
            entity.HasKey(e => e.FAttractionImageId).HasName("PK__tAttract__DD99A010444533BD");

            entity.ToTable("tAttractionImages");

            entity.Property(e => e.FAttractionImageId).HasColumnName("fAttractionImageId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FImage)
                .HasColumnType("image")
                .HasColumnName("fImage");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionImages)
                .HasForeignKey(d => d.FAttractionId)
                .HasConstraintName("FK__tAttracti__fAttr__05D8E0BE");
        });

        modelBuilder.Entity<TAttractionTicket>(entity =>
        {
            entity.HasKey(e => e.FAttractionTicketId).HasName("PK__tAttract__7501AAD74D33E28F");

            entity.ToTable("tAttractionTickets");

            entity.Property(e => e.FAttractionTicketId).HasColumnName("fAttractionTicketId");
            entity.Property(e => e.FAttractionId).HasColumnName("fAttractionId");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FDiscountInformation).HasColumnName("fDiscountInformation");
            entity.Property(e => e.FPrice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fPrice");
            entity.Property(e => e.FTicketType)
                .HasMaxLength(10)
                .HasColumnName("fTicketType");

            entity.HasOne(d => d.FAttraction).WithMany(p => p.TAttractionTickets)
                .HasForeignKey(d => d.FAttractionId)
                .HasConstraintName("FK__tAttracti__fAttr__09A971A2");
        });

        modelBuilder.Entity<TAttractionTicketOrder>(entity =>
        {
            entity.HasKey(e => e.FAttractionTicketOrderId);

            entity.ToTable("tAttractionTicketOrder");

            entity.Property(e => e.FAttractionTicketOrderId).HasColumnName("fAttractionTicketOrderId");
            entity.Property(e => e.FAttractionTicketId).HasColumnName("fAttractionTicketId");
            entity.Property(e => e.FBuyerId).HasColumnName("fBuyerId");
            entity.Property(e => e.FCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedDate");
            entity.Property(e => e.FOrderQty).HasColumnName("fOrderQty");
            entity.Property(e => e.FUnitPrice)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fUnitPrice");

            entity.HasOne(d => d.FAttractionTicket).WithMany(p => p.TAttractionTicketOrders)
                .HasForeignKey(d => d.FAttractionTicketId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tAttractionTicketOrder_tAttractionTickets");

            entity.HasOne(d => d.FBuyer).WithMany(p => p.TAttractionTicketOrders)
                .HasForeignKey(d => d.FBuyerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tAttractionTicketOrder_tUser");
        });

        modelBuilder.Entity<TEvent>(entity =>
        {
            entity.HasKey(e => e.FEventId).HasName("PK_tEvents_1");

            entity.ToTable("tEvents");

            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FEventActivityfee)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("fEventActivityfee");
            entity.Property(e => e.FEventCreatedDate)
                .HasPrecision(0)
                .HasColumnName("fEventCreatedDate");
            entity.Property(e => e.FEventCurrentParticipants).HasColumnName("fEventCurrentParticipants");
            entity.Property(e => e.FEventDescription)
                .HasMaxLength(200)
                .HasColumnName("fEventDescription");
            entity.Property(e => e.FEventEndDate)
                .HasMaxLength(50)
                .HasColumnName("fEventEndDate");
            entity.Property(e => e.FEventIsActive).HasColumnName("fEventIsActive");
            entity.Property(e => e.FEventLocation)
                .HasMaxLength(50)
                .HasColumnName("fEventLocation");
            entity.Property(e => e.FEventMaxParticipants).HasColumnName("fEventMaxParticipants");
            entity.Property(e => e.FEventName)
                .HasMaxLength(20)
                .HasColumnName("fEventName");
            entity.Property(e => e.FEventStartDate)
                .HasMaxLength(50)
                .HasColumnName("fEventStartDate");
            entity.Property(e => e.FEventUpdatedDate)
                .HasPrecision(0)
                .HasColumnName("fEventUpdatedDate");
            entity.Property(e => e.FEventUrl)
                .HasMaxLength(250)
                .HasColumnName("fEventURL");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FUser).WithMany(p => p.TEvents)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tEvents_tUser");
        });

        modelBuilder.Entity<TEventCategory>(entity =>
        {
            entity.HasKey(e => e.FEventCategoryId);

            entity.ToTable("tEventCategories");

            entity.Property(e => e.FEventCategoryId).HasColumnName("fEventCategoryId");
            entity.Property(e => e.FEventCategoryName)
                .HasMaxLength(50)
                .HasColumnName("fEventCategoryName");
            entity.Property(e => e.FEventCreatedDate)
                .HasPrecision(0)
                .HasColumnName("fEventCreatedDate");
            entity.Property(e => e.FEventDescriptionn)
                .HasMaxLength(100)
                .HasColumnName("fEventDescriptionn");
        });

        modelBuilder.Entity<TEventCategoryMapping>(entity =>
        {
            entity.HasKey(e => e.FEventCategoryMappingId).HasName("PK_tEventCategoryMapping_1");

            entity.ToTable("tEventCategoryMapping");

            entity.Property(e => e.FEventCategoryMappingId).HasColumnName("fEventCategoryMappingID");
            entity.Property(e => e.FEventCategoryId).HasColumnName("fEventCategoryId");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");

            entity.HasOne(d => d.FEventCategory).WithMany(p => p.TEventCategoryMappings)
                .HasForeignKey(d => d.FEventCategoryId)
                .HasConstraintName("FK_tEventCategoryMapping_tEventCategories");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventCategoryMappings)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventCategoryMapping_tEvents");
        });

        modelBuilder.Entity<TEventImage>(entity =>
        {
            entity.HasKey(e => e.FEventImageId);

            entity.ToTable("tEventImage");

            entity.Property(e => e.FEventImageId).HasColumnName("fEventImageId");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FEventImage)
                .HasColumnType("image")
                .HasColumnName("fEventImage");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventImages)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventImage_tEvents");
        });

        modelBuilder.Entity<TEventRegistrationForm>(entity =>
        {
            entity.HasKey(e => e.FEventRegistrationFormId);

            entity.ToTable("tEventRegistrationForm");

            entity.Property(e => e.FEventRegistrationFormId).HasColumnName("fEventRegistrationFormID");
            entity.Property(e => e.FCancellationDate)
                .HasPrecision(0)
                .HasColumnName("fCancellationDate");
            entity.Property(e => e.FCancellationReason)
                .HasMaxLength(200)
                .HasColumnName("fCancellationReason");
            entity.Property(e => e.FEregistrationDate)
                .HasPrecision(0)
                .HasColumnName("fERegistrationDate");
            entity.Property(e => e.FEventContact)
                .HasMaxLength(100)
                .HasColumnName("fEventContact");
            entity.Property(e => e.FEventContactPhone)
                .HasMaxLength(15)
                .HasColumnName("fEventContactPhone");
            entity.Property(e => e.FEventId).HasColumnName("fEventId");
            entity.Property(e => e.FEventRegistrationCount).HasColumnName("fEventRegistrationCount");
            entity.Property(e => e.FPaymentAmount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fPaymentAmount");
            entity.Property(e => e.FPaymentDate)
                .HasPrecision(0)
                .HasColumnName("fPaymentDate");
            entity.Property(e => e.FPaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("fPaymentMethod");
            entity.Property(e => e.FPaymentStatus)
                .HasMaxLength(50)
                .HasColumnName("fPaymentStatus");
            entity.Property(e => e.FRegistrationStatus)
                .HasMaxLength(50)
                .HasColumnName("fRegistrationStatus");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FEvent).WithMany(p => p.TEventRegistrationForms)
                .HasForeignKey(d => d.FEventId)
                .HasConstraintName("FK_tEventRegistrationForm_tEvents");

            entity.HasOne(d => d.FUser).WithMany(p => p.TEventRegistrationForms)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tEventRegistrationForm_tUser");
        });

        modelBuilder.Entity<TOrder>(entity =>
        {
            entity.HasKey(e => e.FOrderId);

            entity.ToTable("tOrders");

            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("fOrderDate");
            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FPaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("fPaymentMethod");
            entity.Property(e => e.FShipAddress)
                .HasMaxLength(100)
                .HasColumnName("fShipAddress");
            entity.Property(e => e.FStatusId).HasColumnName("fStatusId");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FOrderStatus).WithMany(p => p.TOrderFOrderStatuses)
                .HasForeignKey(d => d.FOrderStatusId)
                .HasConstraintName("FK_tOrders_tOrderStatus");

            entity.HasOne(d => d.FStatus).WithMany(p => p.TOrderFStatuses)
                .HasForeignKey(d => d.FStatusId)
                .HasConstraintName("FK_tOrders_tOrderStatus1");

            entity.HasOne(d => d.FStatusNavigation).WithMany(p => p.TOrders)
                .HasForeignKey(d => d.FStatusId)
                .HasConstraintName("FK_tOrders_tOrderStatusHistory");

            entity.HasOne(d => d.FUser).WithMany(p => p.TOrders)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tOrders_tUser");
        });

        modelBuilder.Entity<TOrderStatus>(entity =>
        {
            entity.HasKey(e => e.FOrderStatusId);

            entity.ToTable("tOrderStatus");

            entity.Property(e => e.FOrderStatusId).HasColumnName("fOrderStatusId");
            entity.Property(e => e.FStatusName)
                .HasMaxLength(50)
                .HasColumnName("fStatusName");
        });

        modelBuilder.Entity<TOrderStatusHistory>(entity =>
        {
            entity.HasKey(e => e.FStatusId);

            entity.ToTable("tOrderStatusHistory");

            entity.Property(e => e.FStatusId)
                .ValueGeneratedNever()
                .HasColumnName("fStatusId");
            entity.Property(e => e.FStatusName)
                .HasMaxLength(50)
                .HasColumnName("fStatusName");
            entity.Property(e => e.FTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("fTimestamp");
        });

        modelBuilder.Entity<TOrdersDetail>(entity =>
        {
            entity.HasKey(e => e.FOrderDetailsId);

            entity.ToTable("tOrdersDetails");

            entity.Property(e => e.FOrderDetailsId).HasColumnName("fOrderDetailsId");
            entity.Property(e => e.FAttractionTicketId).HasColumnName("fAttractionTicketId");
            entity.Property(e => e.FEventRegistrationFormId).HasColumnName("fEventRegistrationFormID");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FOrderQty).HasColumnName("fOrderQty");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FPurchaseCategoryName)
                .HasMaxLength(50)
                .HasColumnName("fPurchaseCategoryName");
            entity.Property(e => e.FUnitPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fUnitPrice");

            entity.HasOne(d => d.FEventRegistrationForm).WithMany(p => p.TOrdersDetails)
                .HasForeignKey(d => d.FEventRegistrationFormId)
                .HasConstraintName("FK_tOrdersDetails_tEventRegistrationForm");

            entity.HasOne(d => d.FOrder).WithMany(p => p.TOrdersDetails)
                .HasForeignKey(d => d.FOrderId)
                .HasConstraintName("FK_tOrdersDetails_tOrders");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TOrdersDetails)
                .HasForeignKey(d => d.FProductId)
                .HasConstraintName("FK_tOrdersDetails_tProduct");
        });

        modelBuilder.Entity<TPost>(entity =>
        {
            entity.HasKey(e => e.FPostId);

            entity.ToTable("tPosts");

            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FCategoryId).HasColumnName("fCategoryId");
            entity.Property(e => e.FContent).HasColumnName("fContent");
            entity.Property(e => e.FCreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fCreatedAt");
            entity.Property(e => e.FIsPublic).HasColumnName("fIsPublic");
            entity.Property(e => e.FTitle)
                .HasMaxLength(20)
                .HasColumnName("fTitle");
            entity.Property(e => e.FUpdatedAt)
                .HasColumnType("datetime")
                .HasColumnName("fUpdatedAt");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FCategory).WithMany(p => p.TPosts)
                .HasForeignKey(d => d.FCategoryId)
                .HasConstraintName("FK_tPostCategories_TO_tPosts");

            entity.HasOne(d => d.FUser).WithMany(p => p.TPosts)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tUser_TO_tPosts");
        });

        modelBuilder.Entity<TPostAndTag>(entity =>
        {
            entity.HasKey(e => e.FPostTagId);

            entity.ToTable("tPostAndTag");

            entity.Property(e => e.FPostTagId).HasColumnName("fPostTagId");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");
            entity.Property(e => e.FTagId).HasColumnName("fTagId");

            entity.HasOne(d => d.FPost).WithMany(p => p.TPostAndTags)
                .HasForeignKey(d => d.FPostId)
                .HasConstraintName("FK_tPosts_TO_tPostAndTag");

            entity.HasOne(d => d.FTag).WithMany(p => p.TPostAndTags)
                .HasForeignKey(d => d.FTagId)
                .HasConstraintName("FK_tPostAndTag_tPostTags");
        });

        modelBuilder.Entity<TPostCategory>(entity =>
        {
            entity.HasKey(e => e.FCategoryId);

            entity.ToTable("tPostCategories");

            entity.Property(e => e.FCategoryId).HasColumnName("fCategoryId");
            entity.Property(e => e.FName)
                .HasMaxLength(20)
                .HasColumnName("fName");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FUser).WithMany(p => p.TPostCategories)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tPostCategories_tUser");
        });

        modelBuilder.Entity<TPostImage>(entity =>
        {
            entity.HasKey(e => e.FImageId);

            entity.ToTable("tPostImages");

            entity.Property(e => e.FImageId).HasColumnName("fImageId");
            entity.Property(e => e.FImage)
                .HasColumnType("image")
                .HasColumnName("fImage");
            entity.Property(e => e.FPostId).HasColumnName("fPostId");

            entity.HasOne(d => d.FPost).WithMany(p => p.TPostImages)
                .HasForeignKey(d => d.FPostId)
                .HasConstraintName("FK_tPosts_TO_tPostImages");
        });

        modelBuilder.Entity<TPostTag>(entity =>
        {
            entity.HasKey(e => e.FTagId);

            entity.ToTable("tPostTags");

            entity.Property(e => e.FTagId).HasColumnName("fTagId");
            entity.Property(e => e.FTagName)
                .HasMaxLength(50)
                .HasColumnName("fTagName");
        });

        modelBuilder.Entity<TProduct>(entity =>
        {
            entity.HasKey(e => e.FProductId);

            entity.ToTable("tProduct");

            entity.Property(e => e.FProductId).HasColumnName("fProductId");
            entity.Property(e => e.FIsOnSales).HasColumnName("fIsOnSales");
            entity.Property(e => e.FProductCategoryId).HasColumnName("fProductCategoryId");
            entity.Property(e => e.FProductDateAdd)
                .HasColumnType("datetime")
                .HasColumnName("fProductDateAdd");
            entity.Property(e => e.FProductDescription)
                .HasMaxLength(200)
                .HasColumnName("fProductDescription");
            entity.Property(e => e.FProductName)
                .HasMaxLength(50)
                .HasColumnName("fProductName");
            entity.Property(e => e.FProductPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("fProductPrice");
            entity.Property(e => e.FProductUpdated)
                .HasColumnType("datetime")
                .HasColumnName("fProductUpdated");
            entity.Property(e => e.FStock).HasColumnName("fStock");
            entity.Property(e => e.FUserId).HasColumnName("fUserId");

            entity.HasOne(d => d.FProductCategory).WithMany(p => p.TProducts)
                .HasForeignKey(d => d.FProductCategoryId)
                .HasConstraintName("FK_tProduct_tProductCategories");

            entity.HasOne(d => d.FUser).WithMany(p => p.TProducts)
                .HasForeignKey(d => d.FUserId)
                .HasConstraintName("FK_tProduct_tUser");
        });

        modelBuilder.Entity<TProductCategory>(entity =>
        {
            entity.HasKey(e => e.FProductCategoryId);

            entity.ToTable("tProductCategories");

            entity.Property(e => e.FProductCategoryId).HasColumnName("fProductCategoryId");
            entity.Property(e => e.FCategoryName)
                .HasMaxLength(50)
                .HasColumnName("fCategoryName");
        });

        modelBuilder.Entity<TProductImage>(entity =>
        {
            entity.HasKey(e => e.FProductImageId);

            entity.ToTable("tProductImage");

            entity.Property(e => e.FProductImageId).HasColumnName("fProductImageId");
            entity.Property(e => e.FImage).HasColumnName("fImage");
            entity.Property(e => e.FProductId).HasColumnName("fProductId");

            entity.HasOne(d => d.FProduct).WithMany(p => p.TProductImages)
                .HasForeignKey(d => d.FProductId)
                .HasConstraintName("FK_tProductImage_tProduct");
        });

        modelBuilder.Entity<TUser>(entity =>
        {
            entity.HasKey(e => e.FUserId);

            entity.ToTable("tUser");

            entity.Property(e => e.FUserId).HasColumnName("fUserId");
            entity.Property(e => e.FUserAddress)
                .HasMaxLength(50)
                .HasColumnName("fUserAddress");
            entity.Property(e => e.FUserBirthday)
                .HasColumnType("datetime")
                .HasColumnName("fUserBirthday");
            entity.Property(e => e.FUserComeDate)
                .HasColumnType("datetime")
                .HasColumnName("fUserComeDate");
            entity.Property(e => e.FUserEmail)
                .HasMaxLength(50)
                .HasColumnName("fUserEmail");
            entity.Property(e => e.FUserImage)
                .HasColumnType("image")
                .HasColumnName("fUserImage");
            entity.Property(e => e.FUserName)
                .HasMaxLength(20)
                .HasColumnName("fUserName");
            entity.Property(e => e.FUserNickName)
                .HasMaxLength(20)
                .HasColumnName("fUserNickName");
            entity.Property(e => e.FUserNotify).HasColumnName("fUserNotify");
            entity.Property(e => e.FUserOnLine).HasColumnName("fUserOnLine");
            entity.Property(e => e.FUserPassword).HasColumnName("fUserPassword");
            entity.Property(e => e.FUserPhone)
                .HasMaxLength(20)
                .HasColumnName("fUserPhone");
            entity.Property(e => e.FUserRankId).HasColumnName("fUserRankId");
            entity.Property(e => e.FUserSex)
                .HasMaxLength(10)
                .HasColumnName("fUserSex");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}